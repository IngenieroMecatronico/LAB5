
Laboratorio5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000006e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099b  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000777  00000000  00000000  0000115f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000564  00000000  00000000  000018d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a4  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  9e:	0c 94 35 03 	jmp	0x66a	; 0x66a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupPWM1>:
//*****************************************************
// Setup:
//*****************************************************

void setupPWM1(void) {
	cli();
  a6:	f8 94       	cli
	// Configura los pines de los botones como entrada con pull-up
	UCSR0B = 0;
  a8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//Configurando el pin 1 del puerto B como salida. (OC1A)
	DDRB |= (1<<DDB1);
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	84 b9       	out	0x04, r24	; 4
	TCCR1A = 0;
  b2:	a0 e8       	ldi	r26, 0x80	; 128
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	1c 92       	st	X, r1
	TCCR1B = 0;
  b8:	e1 e8       	ldi	r30, 0x81	; 129
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
	//Configuramos el modo y el prescaler.
	TCCR1A |= (1<<COM1A1);//|(1<<COM1A0); //Configuramos en modo rápido no invertido.
  be:	8c 91       	ld	r24, X
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	8c 93       	st	X, r24
	// Configuramos el modo Fast para que llegue al OCR1A
	TCCR1A |= (1<<WGM11);//|(1<<WGM10);
  c4:	8c 91       	ld	r24, X
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12);
  ca:	80 81       	ld	r24, Z
  cc:	88 61       	ori	r24, 0x18	; 24
  ce:	80 83       	st	Z, r24
	//Configuro mi prescaler a 8, debido a que mi periodo máximo es de 32.77 ms y necesito solo 20 ms para mover el servo.
	TCCR1B |= (1<<CS11);
  d0:	80 81       	ld	r24, Z
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	80 83       	st	Z, r24
	//Escribo 39999 a ICR1 dividido entre H y L
	ICR1H = 0x9C;
  d6:	8c e9       	ldi	r24, 0x9C	; 156
  d8:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 0x3F;
  dc:	8f e3       	ldi	r24, 0x3F	; 63
  de:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	sei();
  e2:	78 94       	sei
  e4:	08 95       	ret

000000e6 <setupPWM2>:
}

void setupPWM2(void) {
	cli();
  e6:	f8 94       	cli
	// Configura los pines de los botones como entrada con pull-up
	UCSR0B = 0;
  e8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//Configurando el pin 1 del puerto B como salida. (OC1A)
	DDRB |= (1<<DDB3);
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD3);
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	8a b9       	out	0x0a, r24	; 10
	
	TCCR2A = 0;
  f8:	e0 eb       	ldi	r30, 0xB0	; 176
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	10 82       	st	Z, r1
	TCCR2B = 0;
  fe:	a1 eb       	ldi	r26, 0xB1	; 177
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	1c 92       	st	X, r1
	//Configuramos el modo y el prescaler.
	TCCR2A |= (1<<COM2A1);//|(1<<COM1A0); //Configuramos en modo rápido no invertido.
 104:	80 81       	ld	r24, Z
 106:	80 68       	ori	r24, 0x80	; 128
 108:	80 83       	st	Z, r24
	// Configuramos el modo Fast para que llegue al OxFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
 10a:	80 81       	ld	r24, Z
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	80 83       	st	Z, r24
	// Configurando OC2B como no invertido
	TCCR2A |= (1 << COM2B1);
 110:	80 81       	ld	r24, Z
 112:	80 62       	ori	r24, 0x20	; 32
 114:	80 83       	st	Z, r24
	TCCR2A &= ~(1 << COM2B0);
 116:	80 81       	ld	r24, Z
 118:	8f 7e       	andi	r24, 0xEF	; 239
 11a:	80 83       	st	Z, r24
	//Configuro mi prescaler a 8, debido a que mi periodo máximo es de 32.77 ms y necesito solo 20 ms para mover el servo.
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 11c:	8c 91       	ld	r24, X
 11e:	87 60       	ori	r24, 0x07	; 7
 120:	8c 93       	st	X, r24
	sei();
 122:	78 94       	sei
 124:	08 95       	ret

00000126 <InitADC1>:
}
	
void InitADC1(void){
	ADMUX |= (1 << REFS0);      //Estoy configurando a que funcione con AVCC.
 126:	ec e7       	ldi	r30, 0x7C	; 124
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 130:	80 81       	ld	r24, Z
 132:	8f 77       	andi	r24, 0x7F	; 127
 134:	80 83       	st	Z, r24
	//Justificacion a la izquierda.
	ADMUX |= (1 << ADLAR); 
 136:	80 81       	ld	r24, Z
 138:	80 62       	ori	r24, 0x20	; 32
 13a:	80 83       	st	Z, r24
	//Apagamos la salida digital de PINC0
	DIDR0 |= (1 << ADC0D);
 13c:	ae e7       	ldi	r26, 0x7E	; 126
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	8c 91       	ld	r24, X
 142:	81 60       	ori	r24, 0x01	; 1
 144:	8c 93       	st	X, r24
	//Configuración del canal 0 ya que allí esta mi potenciómetro.
	ADMUX &= ~(1 << MUX0); 
 146:	80 81       	ld	r24, Z
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	80 83       	st	Z, r24
	ADCSRA = 0;
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	10 82       	st	Z, r1
	//Habilitamos la bandera del ADC
	ADCSRA |= (1 << ADIE);
 152:	80 81       	ld	r24, Z
 154:	88 60       	ori	r24, 0x08	; 8
 156:	80 83       	st	Z, r24
	//Habilitamos el prescaler a 128.
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
 158:	80 81       	ld	r24, Z
 15a:	87 60       	ori	r24, 0x07	; 7
 15c:	80 83       	st	Z, r24
	//Habilitamos el ADC
	ADCSRA |= (1 << ADEN);
 15e:	80 81       	ld	r24, Z
 160:	80 68       	ori	r24, 0x80	; 128
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <InitADC2>:
	
	
}

void InitADC2(void){
	ADMUX |= (1 << REFS0);      //Estoy configurando a que funcione con AVCC.
 166:	ec e7       	ldi	r30, 0x7C	; 124
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 170:	80 81       	ld	r24, Z
 172:	8f 77       	andi	r24, 0x7F	; 127
 174:	80 83       	st	Z, r24
	//Justificacion a la izquierda.
	ADMUX |= (1 << ADLAR);
 176:	80 81       	ld	r24, Z
 178:	80 62       	ori	r24, 0x20	; 32
 17a:	80 83       	st	Z, r24
	//Apagamos la salida digital de PINC1
	DIDR0 |= (1 << ADC1D);
 17c:	ae e7       	ldi	r26, 0x7E	; 126
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	8c 91       	ld	r24, X
 182:	82 60       	ori	r24, 0x02	; 2
 184:	8c 93       	st	X, r24
	//Configuración del canal 1 ya que allí esta mi potenciómetro.
	ADMUX |= (1 << MUX0);
 186:	80 81       	ld	r24, Z
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 83       	st	Z, r24
	ADCSRA = 0;
 18c:	ea e7       	ldi	r30, 0x7A	; 122
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	10 82       	st	Z, r1
	//Habilitamos la bandera del ADC
	ADCSRA |= (1 << ADIE);
 192:	80 81       	ld	r24, Z
 194:	88 60       	ori	r24, 0x08	; 8
 196:	80 83       	st	Z, r24
	//Habilitamos el prescaler a 128.
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
 198:	80 81       	ld	r24, Z
 19a:	87 60       	ori	r24, 0x07	; 7
 19c:	80 83       	st	Z, r24
	//Habilitamos el ADC
	ADCSRA |= (1 << ADEN);	
 19e:	80 81       	ld	r24, Z
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <InitADC3>:
}

void InitADC3(void){
	ADMUX |= (1 << REFS0);      //Estoy configurando a que funcione con AVCC.
 1a6:	ec e7       	ldi	r30, 0x7C	; 124
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	80 64       	ori	r24, 0x40	; 64
 1ae:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 1b0:	80 81       	ld	r24, Z
 1b2:	8f 77       	andi	r24, 0x7F	; 127
 1b4:	80 83       	st	Z, r24
	//Justificacion a la izquierda.
	ADMUX |= (1 << ADLAR);
 1b6:	80 81       	ld	r24, Z
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	80 83       	st	Z, r24
	//Apagamos la salida digital de PINC3
	DIDR0 |= (1 << ADC3D);
 1bc:	ae e7       	ldi	r26, 0x7E	; 126
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	8c 91       	ld	r24, X
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	8c 93       	st	X, r24
	//Configuración del canal 0 ya que allí esta mi potenciómetro.
	ADMUX |= (1 << MUX1) | (1 << MUX0);
 1c6:	80 81       	ld	r24, Z
 1c8:	83 60       	ori	r24, 0x03	; 3
 1ca:	80 83       	st	Z, r24
	ADCSRA = 0;
 1cc:	ea e7       	ldi	r30, 0x7A	; 122
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	10 82       	st	Z, r1
	//Habilitamos la bandera del ADC
	ADCSRA |= (1 << ADIE);
 1d2:	80 81       	ld	r24, Z
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	80 83       	st	Z, r24
	//Habilitamos el prescaler a 128.
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
 1d8:	80 81       	ld	r24, Z
 1da:	87 60       	ori	r24, 0x07	; 7
 1dc:	80 83       	st	Z, r24
	//Habilitamos el ADC
	ADCSRA |= (1 << ADEN);
 1de:	80 81       	ld	r24, Z
 1e0:	80 68       	ori	r24, 0x80	; 128
 1e2:	80 83       	st	Z, r24
 1e4:	08 95       	ret

000001e6 <main>:
}
//*****************************************************
// Loop principal:
//*****************************************************
int main(void) {
	setupPWM1(); // Inicializa todo.
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <setupPWM1>
	setupPWM2();
 1ea:	0e 94 73 00 	call	0xe6	; 0xe6 <setupPWM2>
	InitADC1();
 1ee:	0e 94 93 00 	call	0x126	; 0x126 <InitADC1>
	InitADC2();
 1f2:	0e 94 b3 00 	call	0x166	; 0x166 <InitADC2>
	InitADC3();
 1f6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <InitADC3>
	DDRB = 0xFF;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	84 b9       	out	0x04, r24	; 4
	ADCSRA |= (1<<ADSC);   //Habilito la interrupcion de ADC.
 1fe:	ea e7       	ldi	r30, 0x7A	; 122
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 64       	ori	r24, 0x40	; 64
 206:	80 83       	st	Z, r24
	while (1) {
		PWM1(1, valoradc);
 208:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 3f 01 	call	0x27e	; 0x27e <PWM1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	9c e9       	ldi	r25, 0x9C	; 156
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <main+0x30>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x36>
 21c:	00 00       	nop
		_delay_ms(10);
		//ADCSRA |= (1<<ADSC); 
		PWM1(0, valoradc);
 21e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 3f 01 	call	0x27e	; 0x27e <PWM1>
 228:	8f e3       	ldi	r24, 0x3F	; 63
 22a:	9c e9       	ldi	r25, 0x9C	; 156
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x46>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x4c>
 232:	00 00       	nop
		_delay_ms(10);
		PWM1(3, valoradc);
 234:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	0e 94 3f 01 	call	0x27e	; 0x27e <PWM1>
 23e:	8f e3       	ldi	r24, 0x3F	; 63
 240:	9c e9       	ldi	r25, 0x9C	; 156
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x5c>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x62>
 248:	00 00       	nop
 24a:	de cf       	rjmp	.-68     	; 0x208 <main+0x22>

0000024c <__vector_21>:

//*****************************************************
// Interrupciones:
//*****************************************************

ISR(ADC_vect){
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	8f 93       	push	r24
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
	//uint16_t valor_total;
	valoradc = ADCH;
 25c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 260:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1<<ADIF); // Apaga la bandera de interrupción del ADC
 264:	ea e7       	ldi	r30, 0x7A	; 122
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	80 61       	ori	r24, 0x10	; 16
 26c:	80 83       	st	Z, r24

 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	8f 91       	pop	r24
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <PWM1>:
#include "PWM1.h"
#include <avr/interrupt.h>

int PWM1(uint8_t numeropot, uint8_t valoradc){
	uint16_t valortotal;
	if (numeropot == 1)
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	31 f5       	brne	.+76     	; 0x2ce <PWM1+0x50>
	{
		ADMUX = (ADMUX & 0xF0) | numeropot;
 282:	ec e7       	ldi	r30, 0x7C	; 124
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	90 81       	ld	r25, Z
 288:	90 7f       	andi	r25, 0xF0	; 240
 28a:	89 2b       	or	r24, r25
 28c:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC);
 28e:	ea e7       	ldi	r30, 0x7A	; 122
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	80 64       	ori	r24, 0x40	; 64
 296:	80 83       	st	Z, r24
		valortotal = (14.12*valoradc)+1198;//mapeo(valoradc, 0, 255, 19, 39); // Establece el ancho de pulso del servo
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 3c 02 	call	0x478	; 0x478 <__floatsisf>
 2a2:	25 e8       	ldi	r18, 0x85	; 133
 2a4:	3b ee       	ldi	r19, 0xEB	; 235
 2a6:	41 e6       	ldi	r20, 0x61	; 97
 2a8:	51 e4       	ldi	r21, 0x41	; 65
 2aa:	0e 94 c8 02 	call	0x590	; 0x590 <__mulsf3>
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 ec       	ldi	r19, 0xC0	; 192
 2b2:	45 e9       	ldi	r20, 0x95	; 149
 2b4:	54 e4       	ldi	r21, 0x44	; 68
 2b6:	0e 94 9f 01 	call	0x33e	; 0x33e <__addsf3>
 2ba:	0e 94 0b 02 	call	0x416	; 0x416 <__fixunssfsi>
		OCR1AH = (valortotal & 0xFF00) >> 8;
 2be:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		OCR1AL |= valortotal & 0x00FF;
 2c2:	e8 e8       	ldi	r30, 0x88	; 136
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	68 2b       	or	r22, r24
 2ca:	60 83       	st	Z, r22
 2cc:	32 c0       	rjmp	.+100    	; 0x332 <PWM1+0xb4>
	}else if (numeropot == 0){
 2ce:	81 11       	cpse	r24, r1
 2d0:	21 c0       	rjmp	.+66     	; 0x314 <PWM1+0x96>
		ADMUX = (ADMUX & 0xF0) | numeropot;
 2d2:	ec e7       	ldi	r30, 0x7C	; 124
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	90 81       	ld	r25, Z
 2d8:	90 7f       	andi	r25, 0xF0	; 240
 2da:	89 2b       	or	r24, r25
 2dc:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC);
 2de:	ea e7       	ldi	r30, 0x7A	; 122
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	80 64       	ori	r24, 0x40	; 64
 2e6:	80 83       	st	Z, r24
		OCR2A = (0.094*valoradc)+6.7;
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 3c 02 	call	0x478	; 0x478 <__floatsisf>
 2f2:	22 e1       	ldi	r18, 0x12	; 18
 2f4:	33 e8       	ldi	r19, 0x83	; 131
 2f6:	40 ec       	ldi	r20, 0xC0	; 192
 2f8:	5d e3       	ldi	r21, 0x3D	; 61
 2fa:	0e 94 c8 02 	call	0x590	; 0x590 <__mulsf3>
 2fe:	26 e6       	ldi	r18, 0x66	; 102
 300:	36 e6       	ldi	r19, 0x66	; 102
 302:	46 ed       	ldi	r20, 0xD6	; 214
 304:	50 e4       	ldi	r21, 0x40	; 64
 306:	0e 94 9f 01 	call	0x33e	; 0x33e <__addsf3>
 30a:	0e 94 0b 02 	call	0x416	; 0x416 <__fixunssfsi>
 30e:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 312:	0f c0       	rjmp	.+30     	; 0x332 <PWM1+0xb4>
		//while (ADCSRA & (1 << ADSC));
	}else if (numeropot == 3){
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	69 f4       	brne	.+26     	; 0x332 <PWM1+0xb4>
		ADMUX = (ADMUX & 0xF0) | numeropot;
 318:	ec e7       	ldi	r30, 0x7C	; 124
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	90 81       	ld	r25, Z
 31e:	90 7f       	andi	r25, 0xF0	; 240
 320:	89 2b       	or	r24, r25
 322:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC);
 324:	ea e7       	ldi	r30, 0x7A	; 122
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	80 83       	st	Z, r24
		OCR2B = valoradc;
 32e:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	}
	while (ADCSRA & (1 << ADSC));
 332:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 336:	86 fd       	sbrc	r24, 6
 338:	fc cf       	rjmp	.-8      	; 0x332 <PWM1+0xb4>
 33a:	08 95       	ret

0000033c <__subsf3>:
 33c:	50 58       	subi	r21, 0x80	; 128

0000033e <__addsf3>:
 33e:	bb 27       	eor	r27, r27
 340:	aa 27       	eor	r26, r26
 342:	0e 94 b6 01 	call	0x36c	; 0x36c <__addsf3x>
 346:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_round>
 34a:	0e 94 80 02 	call	0x500	; 0x500 <__fp_pscA>
 34e:	38 f0       	brcs	.+14     	; 0x35e <__addsf3+0x20>
 350:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_pscB>
 354:	20 f0       	brcs	.+8      	; 0x35e <__addsf3+0x20>
 356:	39 f4       	brne	.+14     	; 0x366 <__addsf3+0x28>
 358:	9f 3f       	cpi	r25, 0xFF	; 255
 35a:	19 f4       	brne	.+6      	; 0x362 <__addsf3+0x24>
 35c:	26 f4       	brtc	.+8      	; 0x366 <__addsf3+0x28>
 35e:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_nan>
 362:	0e f4       	brtc	.+2      	; 0x366 <__addsf3+0x28>
 364:	e0 95       	com	r30
 366:	e7 fb       	bst	r30, 7
 368:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_inf>

0000036c <__addsf3x>:
 36c:	e9 2f       	mov	r30, r25
 36e:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_split3>
 372:	58 f3       	brcs	.-42     	; 0x34a <__addsf3+0xc>
 374:	ba 17       	cp	r27, r26
 376:	62 07       	cpc	r22, r18
 378:	73 07       	cpc	r23, r19
 37a:	84 07       	cpc	r24, r20
 37c:	95 07       	cpc	r25, r21
 37e:	20 f0       	brcs	.+8      	; 0x388 <__addsf3x+0x1c>
 380:	79 f4       	brne	.+30     	; 0x3a0 <__addsf3x+0x34>
 382:	a6 f5       	brtc	.+104    	; 0x3ec <__addsf3x+0x80>
 384:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_zero>
 388:	0e f4       	brtc	.+2      	; 0x38c <__addsf3x+0x20>
 38a:	e0 95       	com	r30
 38c:	0b 2e       	mov	r0, r27
 38e:	ba 2f       	mov	r27, r26
 390:	a0 2d       	mov	r26, r0
 392:	0b 01       	movw	r0, r22
 394:	b9 01       	movw	r22, r18
 396:	90 01       	movw	r18, r0
 398:	0c 01       	movw	r0, r24
 39a:	ca 01       	movw	r24, r20
 39c:	a0 01       	movw	r20, r0
 39e:	11 24       	eor	r1, r1
 3a0:	ff 27       	eor	r31, r31
 3a2:	59 1b       	sub	r21, r25
 3a4:	99 f0       	breq	.+38     	; 0x3cc <__addsf3x+0x60>
 3a6:	59 3f       	cpi	r21, 0xF9	; 249
 3a8:	50 f4       	brcc	.+20     	; 0x3be <__addsf3x+0x52>
 3aa:	50 3e       	cpi	r21, 0xE0	; 224
 3ac:	68 f1       	brcs	.+90     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3ae:	1a 16       	cp	r1, r26
 3b0:	f0 40       	sbci	r31, 0x00	; 0
 3b2:	a2 2f       	mov	r26, r18
 3b4:	23 2f       	mov	r18, r19
 3b6:	34 2f       	mov	r19, r20
 3b8:	44 27       	eor	r20, r20
 3ba:	58 5f       	subi	r21, 0xF8	; 248
 3bc:	f3 cf       	rjmp	.-26     	; 0x3a4 <__addsf3x+0x38>
 3be:	46 95       	lsr	r20
 3c0:	37 95       	ror	r19
 3c2:	27 95       	ror	r18
 3c4:	a7 95       	ror	r26
 3c6:	f0 40       	sbci	r31, 0x00	; 0
 3c8:	53 95       	inc	r21
 3ca:	c9 f7       	brne	.-14     	; 0x3be <__addsf3x+0x52>
 3cc:	7e f4       	brtc	.+30     	; 0x3ec <__addsf3x+0x80>
 3ce:	1f 16       	cp	r1, r31
 3d0:	ba 0b       	sbc	r27, r26
 3d2:	62 0b       	sbc	r22, r18
 3d4:	73 0b       	sbc	r23, r19
 3d6:	84 0b       	sbc	r24, r20
 3d8:	ba f0       	brmi	.+46     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3da:	91 50       	subi	r25, 0x01	; 1
 3dc:	a1 f0       	breq	.+40     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3de:	ff 0f       	add	r31, r31
 3e0:	bb 1f       	adc	r27, r27
 3e2:	66 1f       	adc	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	c2 f7       	brpl	.-16     	; 0x3da <__addsf3x+0x6e>
 3ea:	0e c0       	rjmp	.+28     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3ec:	ba 0f       	add	r27, r26
 3ee:	62 1f       	adc	r22, r18
 3f0:	73 1f       	adc	r23, r19
 3f2:	84 1f       	adc	r24, r20
 3f4:	48 f4       	brcc	.+18     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f6:	87 95       	ror	r24
 3f8:	77 95       	ror	r23
 3fa:	67 95       	ror	r22
 3fc:	b7 95       	ror	r27
 3fe:	f7 95       	ror	r31
 400:	9e 3f       	cpi	r25, 0xFE	; 254
 402:	08 f0       	brcs	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	b0 cf       	rjmp	.-160    	; 0x366 <__addsf3+0x28>
 406:	93 95       	inc	r25
 408:	88 0f       	add	r24, r24
 40a:	08 f0       	brcs	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40c:	99 27       	eor	r25, r25
 40e:	ee 0f       	add	r30, r30
 410:	97 95       	ror	r25
 412:	87 95       	ror	r24
 414:	08 95       	ret

00000416 <__fixunssfsi>:
 416:	0e 94 a7 02 	call	0x54e	; 0x54e <__fp_splitA>
 41a:	88 f0       	brcs	.+34     	; 0x43e <__fixunssfsi+0x28>
 41c:	9f 57       	subi	r25, 0x7F	; 127
 41e:	98 f0       	brcs	.+38     	; 0x446 <__fixunssfsi+0x30>
 420:	b9 2f       	mov	r27, r25
 422:	99 27       	eor	r25, r25
 424:	b7 51       	subi	r27, 0x17	; 23
 426:	b0 f0       	brcs	.+44     	; 0x454 <__fixunssfsi+0x3e>
 428:	e1 f0       	breq	.+56     	; 0x462 <__fixunssfsi+0x4c>
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	88 1f       	adc	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	1a f0       	brmi	.+6      	; 0x43a <__fixunssfsi+0x24>
 434:	ba 95       	dec	r27
 436:	c9 f7       	brne	.-14     	; 0x42a <__fixunssfsi+0x14>
 438:	14 c0       	rjmp	.+40     	; 0x462 <__fixunssfsi+0x4c>
 43a:	b1 30       	cpi	r27, 0x01	; 1
 43c:	91 f0       	breq	.+36     	; 0x462 <__fixunssfsi+0x4c>
 43e:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_zero>
 442:	b1 e0       	ldi	r27, 0x01	; 1
 444:	08 95       	ret
 446:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_zero>
 44a:	67 2f       	mov	r22, r23
 44c:	78 2f       	mov	r23, r24
 44e:	88 27       	eor	r24, r24
 450:	b8 5f       	subi	r27, 0xF8	; 248
 452:	39 f0       	breq	.+14     	; 0x462 <__fixunssfsi+0x4c>
 454:	b9 3f       	cpi	r27, 0xF9	; 249
 456:	cc f3       	brlt	.-14     	; 0x44a <__fixunssfsi+0x34>
 458:	86 95       	lsr	r24
 45a:	77 95       	ror	r23
 45c:	67 95       	ror	r22
 45e:	b3 95       	inc	r27
 460:	d9 f7       	brne	.-10     	; 0x458 <__fixunssfsi+0x42>
 462:	3e f4       	brtc	.+14     	; 0x472 <__fixunssfsi+0x5c>
 464:	90 95       	com	r25
 466:	80 95       	com	r24
 468:	70 95       	com	r23
 46a:	61 95       	neg	r22
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	8f 4f       	sbci	r24, 0xFF	; 255
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	08 95       	ret

00000474 <__floatunsisf>:
 474:	e8 94       	clt
 476:	09 c0       	rjmp	.+18     	; 0x48a <__floatsisf+0x12>

00000478 <__floatsisf>:
 478:	97 fb       	bst	r25, 7
 47a:	3e f4       	brtc	.+14     	; 0x48a <__floatsisf+0x12>
 47c:	90 95       	com	r25
 47e:	80 95       	com	r24
 480:	70 95       	com	r23
 482:	61 95       	neg	r22
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	8f 4f       	sbci	r24, 0xFF	; 255
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	99 23       	and	r25, r25
 48c:	a9 f0       	breq	.+42     	; 0x4b8 <__floatsisf+0x40>
 48e:	f9 2f       	mov	r31, r25
 490:	96 e9       	ldi	r25, 0x96	; 150
 492:	bb 27       	eor	r27, r27
 494:	93 95       	inc	r25
 496:	f6 95       	lsr	r31
 498:	87 95       	ror	r24
 49a:	77 95       	ror	r23
 49c:	67 95       	ror	r22
 49e:	b7 95       	ror	r27
 4a0:	f1 11       	cpse	r31, r1
 4a2:	f8 cf       	rjmp	.-16     	; 0x494 <__floatsisf+0x1c>
 4a4:	fa f4       	brpl	.+62     	; 0x4e4 <__floatsisf+0x6c>
 4a6:	bb 0f       	add	r27, r27
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__floatsisf+0x36>
 4aa:	60 ff       	sbrs	r22, 0
 4ac:	1b c0       	rjmp	.+54     	; 0x4e4 <__floatsisf+0x6c>
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	8f 4f       	sbci	r24, 0xFF	; 255
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	16 c0       	rjmp	.+44     	; 0x4e4 <__floatsisf+0x6c>
 4b8:	88 23       	and	r24, r24
 4ba:	11 f0       	breq	.+4      	; 0x4c0 <__floatsisf+0x48>
 4bc:	96 e9       	ldi	r25, 0x96	; 150
 4be:	11 c0       	rjmp	.+34     	; 0x4e2 <__floatsisf+0x6a>
 4c0:	77 23       	and	r23, r23
 4c2:	21 f0       	breq	.+8      	; 0x4cc <__floatsisf+0x54>
 4c4:	9e e8       	ldi	r25, 0x8E	; 142
 4c6:	87 2f       	mov	r24, r23
 4c8:	76 2f       	mov	r23, r22
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <__floatsisf+0x5e>
 4cc:	66 23       	and	r22, r22
 4ce:	71 f0       	breq	.+28     	; 0x4ec <__floatsisf+0x74>
 4d0:	96 e8       	ldi	r25, 0x86	; 134
 4d2:	86 2f       	mov	r24, r22
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	2a f0       	brmi	.+10     	; 0x4e4 <__floatsisf+0x6c>
 4da:	9a 95       	dec	r25
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	da f7       	brpl	.-10     	; 0x4da <__floatsisf+0x62>
 4e4:	88 0f       	add	r24, r24
 4e6:	96 95       	lsr	r25
 4e8:	87 95       	ror	r24
 4ea:	97 f9       	bld	r25, 7
 4ec:	08 95       	ret

000004ee <__fp_inf>:
 4ee:	97 f9       	bld	r25, 7
 4f0:	9f 67       	ori	r25, 0x7F	; 127
 4f2:	80 e8       	ldi	r24, 0x80	; 128
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	08 95       	ret

000004fa <__fp_nan>:
 4fa:	9f ef       	ldi	r25, 0xFF	; 255
 4fc:	80 ec       	ldi	r24, 0xC0	; 192
 4fe:	08 95       	ret

00000500 <__fp_pscA>:
 500:	00 24       	eor	r0, r0
 502:	0a 94       	dec	r0
 504:	16 16       	cp	r1, r22
 506:	17 06       	cpc	r1, r23
 508:	18 06       	cpc	r1, r24
 50a:	09 06       	cpc	r0, r25
 50c:	08 95       	ret

0000050e <__fp_pscB>:
 50e:	00 24       	eor	r0, r0
 510:	0a 94       	dec	r0
 512:	12 16       	cp	r1, r18
 514:	13 06       	cpc	r1, r19
 516:	14 06       	cpc	r1, r20
 518:	05 06       	cpc	r0, r21
 51a:	08 95       	ret

0000051c <__fp_round>:
 51c:	09 2e       	mov	r0, r25
 51e:	03 94       	inc	r0
 520:	00 0c       	add	r0, r0
 522:	11 f4       	brne	.+4      	; 0x528 <__fp_round+0xc>
 524:	88 23       	and	r24, r24
 526:	52 f0       	brmi	.+20     	; 0x53c <__fp_round+0x20>
 528:	bb 0f       	add	r27, r27
 52a:	40 f4       	brcc	.+16     	; 0x53c <__fp_round+0x20>
 52c:	bf 2b       	or	r27, r31
 52e:	11 f4       	brne	.+4      	; 0x534 <__fp_round+0x18>
 530:	60 ff       	sbrs	r22, 0
 532:	04 c0       	rjmp	.+8      	; 0x53c <__fp_round+0x20>
 534:	6f 5f       	subi	r22, 0xFF	; 255
 536:	7f 4f       	sbci	r23, 0xFF	; 255
 538:	8f 4f       	sbci	r24, 0xFF	; 255
 53a:	9f 4f       	sbci	r25, 0xFF	; 255
 53c:	08 95       	ret

0000053e <__fp_split3>:
 53e:	57 fd       	sbrc	r21, 7
 540:	90 58       	subi	r25, 0x80	; 128
 542:	44 0f       	add	r20, r20
 544:	55 1f       	adc	r21, r21
 546:	59 f0       	breq	.+22     	; 0x55e <__fp_splitA+0x10>
 548:	5f 3f       	cpi	r21, 0xFF	; 255
 54a:	71 f0       	breq	.+28     	; 0x568 <__fp_splitA+0x1a>
 54c:	47 95       	ror	r20

0000054e <__fp_splitA>:
 54e:	88 0f       	add	r24, r24
 550:	97 fb       	bst	r25, 7
 552:	99 1f       	adc	r25, r25
 554:	61 f0       	breq	.+24     	; 0x56e <__fp_splitA+0x20>
 556:	9f 3f       	cpi	r25, 0xFF	; 255
 558:	79 f0       	breq	.+30     	; 0x578 <__fp_splitA+0x2a>
 55a:	87 95       	ror	r24
 55c:	08 95       	ret
 55e:	12 16       	cp	r1, r18
 560:	13 06       	cpc	r1, r19
 562:	14 06       	cpc	r1, r20
 564:	55 1f       	adc	r21, r21
 566:	f2 cf       	rjmp	.-28     	; 0x54c <__fp_split3+0xe>
 568:	46 95       	lsr	r20
 56a:	f1 df       	rcall	.-30     	; 0x54e <__fp_splitA>
 56c:	08 c0       	rjmp	.+16     	; 0x57e <__fp_splitA+0x30>
 56e:	16 16       	cp	r1, r22
 570:	17 06       	cpc	r1, r23
 572:	18 06       	cpc	r1, r24
 574:	99 1f       	adc	r25, r25
 576:	f1 cf       	rjmp	.-30     	; 0x55a <__fp_splitA+0xc>
 578:	86 95       	lsr	r24
 57a:	71 05       	cpc	r23, r1
 57c:	61 05       	cpc	r22, r1
 57e:	08 94       	sec
 580:	08 95       	ret

00000582 <__fp_zero>:
 582:	e8 94       	clt

00000584 <__fp_szero>:
 584:	bb 27       	eor	r27, r27
 586:	66 27       	eor	r22, r22
 588:	77 27       	eor	r23, r23
 58a:	cb 01       	movw	r24, r22
 58c:	97 f9       	bld	r25, 7
 58e:	08 95       	ret

00000590 <__mulsf3>:
 590:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__mulsf3x>
 594:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_round>
 598:	0e 94 80 02 	call	0x500	; 0x500 <__fp_pscA>
 59c:	38 f0       	brcs	.+14     	; 0x5ac <__mulsf3+0x1c>
 59e:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_pscB>
 5a2:	20 f0       	brcs	.+8      	; 0x5ac <__mulsf3+0x1c>
 5a4:	95 23       	and	r25, r21
 5a6:	11 f0       	breq	.+4      	; 0x5ac <__mulsf3+0x1c>
 5a8:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_inf>
 5ac:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_nan>
 5b0:	11 24       	eor	r1, r1
 5b2:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_szero>

000005b6 <__mulsf3x>:
 5b6:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_split3>
 5ba:	70 f3       	brcs	.-36     	; 0x598 <__mulsf3+0x8>

000005bc <__mulsf3_pse>:
 5bc:	95 9f       	mul	r25, r21
 5be:	c1 f3       	breq	.-16     	; 0x5b0 <__mulsf3+0x20>
 5c0:	95 0f       	add	r25, r21
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	55 1f       	adc	r21, r21
 5c6:	62 9f       	mul	r22, r18
 5c8:	f0 01       	movw	r30, r0
 5ca:	72 9f       	mul	r23, r18
 5cc:	bb 27       	eor	r27, r27
 5ce:	f0 0d       	add	r31, r0
 5d0:	b1 1d       	adc	r27, r1
 5d2:	63 9f       	mul	r22, r19
 5d4:	aa 27       	eor	r26, r26
 5d6:	f0 0d       	add	r31, r0
 5d8:	b1 1d       	adc	r27, r1
 5da:	aa 1f       	adc	r26, r26
 5dc:	64 9f       	mul	r22, r20
 5de:	66 27       	eor	r22, r22
 5e0:	b0 0d       	add	r27, r0
 5e2:	a1 1d       	adc	r26, r1
 5e4:	66 1f       	adc	r22, r22
 5e6:	82 9f       	mul	r24, r18
 5e8:	22 27       	eor	r18, r18
 5ea:	b0 0d       	add	r27, r0
 5ec:	a1 1d       	adc	r26, r1
 5ee:	62 1f       	adc	r22, r18
 5f0:	73 9f       	mul	r23, r19
 5f2:	b0 0d       	add	r27, r0
 5f4:	a1 1d       	adc	r26, r1
 5f6:	62 1f       	adc	r22, r18
 5f8:	83 9f       	mul	r24, r19
 5fa:	a0 0d       	add	r26, r0
 5fc:	61 1d       	adc	r22, r1
 5fe:	22 1f       	adc	r18, r18
 600:	74 9f       	mul	r23, r20
 602:	33 27       	eor	r19, r19
 604:	a0 0d       	add	r26, r0
 606:	61 1d       	adc	r22, r1
 608:	23 1f       	adc	r18, r19
 60a:	84 9f       	mul	r24, r20
 60c:	60 0d       	add	r22, r0
 60e:	21 1d       	adc	r18, r1
 610:	82 2f       	mov	r24, r18
 612:	76 2f       	mov	r23, r22
 614:	6a 2f       	mov	r22, r26
 616:	11 24       	eor	r1, r1
 618:	9f 57       	subi	r25, 0x7F	; 127
 61a:	50 40       	sbci	r21, 0x00	; 0
 61c:	9a f0       	brmi	.+38     	; 0x644 <__mulsf3_pse+0x88>
 61e:	f1 f0       	breq	.+60     	; 0x65c <__mulsf3_pse+0xa0>
 620:	88 23       	and	r24, r24
 622:	4a f0       	brmi	.+18     	; 0x636 <__mulsf3_pse+0x7a>
 624:	ee 0f       	add	r30, r30
 626:	ff 1f       	adc	r31, r31
 628:	bb 1f       	adc	r27, r27
 62a:	66 1f       	adc	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	91 50       	subi	r25, 0x01	; 1
 632:	50 40       	sbci	r21, 0x00	; 0
 634:	a9 f7       	brne	.-22     	; 0x620 <__mulsf3_pse+0x64>
 636:	9e 3f       	cpi	r25, 0xFE	; 254
 638:	51 05       	cpc	r21, r1
 63a:	80 f0       	brcs	.+32     	; 0x65c <__mulsf3_pse+0xa0>
 63c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_inf>
 640:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_szero>
 644:	5f 3f       	cpi	r21, 0xFF	; 255
 646:	e4 f3       	brlt	.-8      	; 0x640 <__mulsf3_pse+0x84>
 648:	98 3e       	cpi	r25, 0xE8	; 232
 64a:	d4 f3       	brlt	.-12     	; 0x640 <__mulsf3_pse+0x84>
 64c:	86 95       	lsr	r24
 64e:	77 95       	ror	r23
 650:	67 95       	ror	r22
 652:	b7 95       	ror	r27
 654:	f7 95       	ror	r31
 656:	e7 95       	ror	r30
 658:	9f 5f       	subi	r25, 0xFF	; 255
 65a:	c1 f7       	brne	.-16     	; 0x64c <__mulsf3_pse+0x90>
 65c:	fe 2b       	or	r31, r30
 65e:	88 0f       	add	r24, r24
 660:	91 1d       	adc	r25, r1
 662:	96 95       	lsr	r25
 664:	87 95       	ror	r24
 666:	97 f9       	bld	r25, 7
 668:	08 95       	ret

0000066a <_exit>:
 66a:	f8 94       	cli

0000066c <__stop_program>:
 66c:	ff cf       	rjmp	.-2      	; 0x66c <__stop_program>
